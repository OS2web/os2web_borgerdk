<?php

/**
 * @file
 * Primary module hooks for os2web_borgerdk module.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function os2web_borgerdk_theme($existing, $type, $theme, $path) {
  return [
    'os2web_borgerdk_article' => [
      'render element' => 'elements',
    ],
    'os2web_borgerdk_microarticle' => [
      'render element' => 'elements',
    ],
    'os2web_borgerdk_selfservice' => [
      'render element' => 'elements',
    ],
    'os2web_borgerdk_selfservice__link' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for os2web_borgerdk_article templates.
 *
 * Default template: os2web-borgerdk-article.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the os2web_borgerdk_article
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *   - view_mode: View mode; e.g., 'full', 'field_reference', etc.
 */
function template_preprocess_os2web_borgerdk_article(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['view_mode'] = $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function os2web_borgerdk_theme_suggestions_os2web_borgerdk_article(array $variables) {
  $suggestions = [];
  $article = $variables['elements']['#os2web_borgerdk_article'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'os2web_borgerdk-article__' . $sanitized_view_mode;
  $suggestions[] = 'os2web_borgerdk-article__' . $article->id();
  $suggestions[] = 'os2web_borgerdk-article__' . $article->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for borger.dk microarticle templates.
 *
 * Default template: os2web-borgerdk-microarticle.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the borger.dk microarticle
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *   - view_mode: View mode; e.g., 'full', 'field_reference', etc.
 */
function template_preprocess_os2web_borgerdk_microarticle(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  if ($variables['view_mode'] == 'field_reference') {
    /** @var \Drupal\os2web_borgerdk\Entity\BorgerdkMicroarticle $microarticle */
    $microarticle = $variables['elements']['#os2web_borgerdk_microarticle'];

    $selfservices = $microarticle->getSelfservices();
    $variables['content']['selfservices'] = [];

    /** @var \Drupal\os2web_borgerdk\Entity\BorgerdkSelfservice $selfservice */
    foreach ($selfservices as $selfservice) {
      $variables['#selfservices'][] = [
        'title' => $selfservice->getTitle(),
        'label' => $selfservice->getLabel(),
        'url' => $selfservice->getUrl(),
      ];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function os2web_borgerdk_theme_suggestions_os2web_borgerdk_microarticle(array $variables) {
  $suggestions = [];
  $microarticle = $variables['elements']['#os2web_borgerdk_microarticle'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'os2web_borgerdk_microarticle__' . $sanitized_view_mode;
  $suggestions[] = 'os2web_borgerdk_microarticle__' . $microarticle->id();
  $suggestions[] = 'os2web_borgerdk_microarticle__' . $microarticle->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for borger.dk selfservice templates.
 *
 * Default template: os2web-borgerdk-selfservice.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the borger.dk selfservice
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *   - view_mode: View mode; e.g., 'full', 'field_reference', etc.
 */
function template_preprocess_os2web_borgerdk_selfservice(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['view_mode'] = $variables['elements']['#view_mode'];
}

/**
 * Prepares variables for borger.dk selfservice templates.
 *
 * Default template: os2web-borgerdk-selfservice--link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the borger.dk selfservice
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *   - view_mode: View mode; e.g., 'full', 'field_reference', etc.
 */
function template_preprocess_os2web_borgerdk_selfservice__link(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['view_mode'] = $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function os2web_borgerdk_theme_suggestions_os2web_borgerdk_selfservice(array $variables) {
  $suggestions = [];
  $selfservice = $variables['elements']['#os2web_borgerdk_selfservice'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'os2web_borgerdk_selfservice__' . $sanitized_view_mode;
  $suggestions[] = 'os2web_borgerdk_selfservice__' . $selfservice->id();
  $suggestions[] = 'os2web_borgerdk_selfservice__' . $selfservice->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_mail().
 */
function os2web_borgerdk_mail($key, &$message, $params) {
  switch ($key) {
    case 'os2web_borgerdk_mail':
      $message['from'] = $params['from'];
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];

      break;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * Adding selfservice categories view into paragraph.
 */
function os2web_borgerdk_preprocess_paragraph__os2web_borgerdk_selfservice_cats(&$variables) {
  $variables['content'] = views_embed_view('os2web_borgerdk_selfservice_cats', 'os2web_borgerdk_embed_selfservice_cats');
}

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * Adding all category selfservices.
 */
function os2web_borgerdk_preprocess_taxonomy_term__os2web_borgerdk_selfservice_cat(&$variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['term'];
  $view_mode = $variables['view_mode'];

  if ($view_mode == 'full') {
    $variables['content']['selfservices'] = views_embed_view('os2web_borgerdk_selfservices', 'os2web_borgerdk_selfservices_embed_category_ss', $term->id());
  }
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * Adding selfservice categories view into paragraph.
 */
function os2web_borgerdk_preprocess_paragraph__os2web_borgerdk_selfser_ref(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  if (!$paragraph->hasField('field_os2web_bdk_selfser_ref_vmo')) {
    return;
  }

  // Getting the view mode, if it's specified.
  $viewMode = $paragraph->field_os2web_bdk_selfser_ref_vmo->value;
  if ($viewMode) {
    $size = $paragraph->field_os2web_bdk_selfser_ref->count();
    for ($i = 0; $i < $size; $i++) {
      $variables['content']['field_os2web_bdk_selfser_ref'][$i]['#view_mode'] = $viewMode;
    }
  }
}

