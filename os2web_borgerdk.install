<?php

/**
 * @file
 * Install, update and uninstall functions for the os2web_borgerdk module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\os2web_borgerdk\Form\SettingsForm;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function os2web_borgerdk_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);

  // Adding access to content for anonymous user.
  $anonym = Role::load('anonymous');
  $anonym->grantPermission('view os2web_borgerdk content');
  $anonym->save();

  // Adding comments permissions for authenticated user.
  $authenticated = Role::load('authenticated');
  $authenticated->grantPermission('view os2web_borgerdk content');
  $authenticated->save();
}

/**
 * Implements hook_uninstall().
 */
function os2web_borgerdk_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function os2web_borgerdk_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['os2web_borgerdk_status'] = [
      'title' => t('os2web_borgerdk status'),
      'value' => t('os2web_borgerdk value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * Implements hook_update_N().
 *
 * Adding source field.
 */
function os2web_borgerdk_update_8001() {
  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Source'))
    ->setDescription(t('The source of Borger.dk content entity.'))
    ->setRequired(TRUE)
    ->setSetting('max_length', 255)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'string',
      'weight' => 21,
    ])
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('source', 'os2web_borgerdk_article', 'os2web_borgerdk_article', $storage_definition);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('source', 'os2web_borgerdk_microarticle', 'os2web_borgerdk_microarticle', $storage_definition);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('source', 'os2web_borgerdk_selfservice', 'os2web_borgerdk_selfservice', $storage_definition);
}

/**
 * Implements hook_update_N().
 *
 * Adding permissions for viewing content.
 */
function os2web_borgerdk_update_8002() {
  // Adding access to content for anonymous user.
  $anonym = Role::load('anonymous');
  $anonym->grantPermission('view os2web_borgerdk content');
  $anonym->save();

  // Adding access to content for authenticated user.
  $authenticated = Role::load('authenticated');
  $authenticated->grantPermission('view os2web_borgerdk content');
  $authenticated->save();
}

/**
 * Implements hook_update_N().
 *
 * Adding description for selfservice.
 */
function os2web_borgerdk_update_8003() {
  $storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Description'))
    ->setDescription(t('The description of the selfservice.'))
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('view', [
      'type' => 'text_default',
      'label' => 'above',
      'weight' => -5,
    ])
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('description', 'os2web_borgerdk_selfservice', 'os2web_borgerdk_selfservice', $storage_definition);
}

/**
 * Implements hook_update_N().
 *
 * Change selfservice title type to textarea.
 */
function os2web_borgerdk_update_8004() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $bundle_of = 'os2web_borgerdk_selfservice';

  $storage = $entity_type_manager->getStorage($bundle_of);
  $bundle_definition = $entity_type_manager->getDefinition($bundle_of);
  // Sometimes the primary key isn't 'id'. e.g. 'eid' or 'item_id'.
  $id_key = $bundle_definition->getKey('id');

  // If there is no data table defined then use the base table.
  $table_name = $storage->getDataTable() ?: $storage->getBaseTable();
  $database = \Drupal::database();
  $definition_manager = \Drupal::entityDefinitionUpdateManager();

  // Store the existing values.
  $title_values = $database->select($table_name)
    ->fields($table_name, [$id_key, 'title'])
    ->execute()
    ->fetchAllKeyed();

  // Clear out the values.
  $database->update($table_name)
    ->fields(['title' => NULL])
    ->execute();

  // Uninstall the field.
  $field_storage_definition = $definition_manager->getFieldStorageDefinition('title', $bundle_of);
  $definition_manager->uninstallFieldStorageDefinition($field_storage_definition);

  // Create a new field definition.
  $new_title_field = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Title'))
    ->setDescription(t('The title of the Borger.dk content entity.'))
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('view', [
      'type' => 'text_default',
      'label' => 'above',
      'weight' => -20,
    ])
    ->setDisplayConfigurable('view', TRUE);

  // Install the new definition.
  $definition_manager->installFieldStorageDefinition('title', $bundle_of, $bundle_of, $new_title_field);

  // Restore the values.
  foreach ($title_values as $id => $value) {
    $database->update($table_name)
      ->fields([
        'title__value' => $value,
        'title__format' => 'wysiwyg_tekst',
      ])
      ->condition($id_key, $id)
      ->execute();
  }
}

/**
 * Implements hook_update_N().
 *
 * Adding selfservice category field.
 */
function os2web_borgerdk_update_8005() {
  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Category'))
    ->setDescription(t('Borger.dk selfservice category'))
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings',
      [
        'target_bundles' => [
          'os2web_borgerdk_selfservice_cat' => 'os2web_borgerdk_selfservice_cat',
        ],
      ])
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => 5,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'autocomplete_type' => 'tags',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('category', 'os2web_borgerdk_selfservice', 'os2web_borgerdk_selfservice', $storage_definition);
}

/**
 * Implements hook_update_N().
 *
 * Changes the format of long text fields: article legislation, article
 * recommendation, microarticle content.
 */
function os2web_borgerdk_update_8006() {
  $database = \Drupal::database();

  // Updating legislation and recommendation formats.
  $database->update('os2web_borgerdk_article')
    ->fields([
      'legislation__format' => 'wysiwyg_tekst',
      'recommendation__format' => 'wysiwyg_tekst',
    ])
    ->execute();

  // Updating content format.
  $database->update('os2web_borgerdk_microarticle')
    ->fields([
      'content__format' => 'wysiwyg_tekst',
    ])
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Change selfservice title type to string.
 */
function os2web_borgerdk_update_8007() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $bundle_of = 'os2web_borgerdk_selfservice';

  $storage = $entity_type_manager->getStorage($bundle_of);
  $bundle_definition = $entity_type_manager->getDefinition($bundle_of);
  // Sometimes the primary key isn't 'id'. e.g. 'eid' or 'item_id'.
  $id_key = $bundle_definition->getKey('id');

  // If there is no data table defined then use the base table.
  $table_name = $storage->getDataTable() ?: $storage->getBaseTable();
  $database = \Drupal::database();
  $definition_manager = \Drupal::entityDefinitionUpdateManager();

  // Store the existing values.
  $title_values = $database->select($table_name)
    ->fields($table_name, [$id_key, 'title__value'])
    ->execute()
    ->fetchAllKeyed();

  // Clear out the values.
  $database->update($table_name)
    ->fields(['title__value' => NULL])
    ->fields(['title__format' => NULL])
    ->execute();

  // Uninstall the field.
  $field_storage_definition = $definition_manager->getFieldStorageDefinition('title', $bundle_of);
  $definition_manager->uninstallFieldStorageDefinition($field_storage_definition);

  // Create a new field definition.
  $new_title_field = BaseFieldDefinition::create('string')
    ->setLabel(t('Title'))
    ->setDescription(t('The title of the Borger.dk content entity.'))
    ->setRequired(TRUE)
    ->setSetting('max_length', 255)
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'string',
      'weight' => -20,
    ])
    ->setDisplayConfigurable('view', TRUE);;

  // Install the new definition.
  $definition_manager->installFieldStorageDefinition('title', $bundle_of, $bundle_of, $new_title_field);

  // Restore the values.
  foreach ($title_values as $id => $value) {
    $database->update($table_name)
      ->fields([
        'title' => strip_tags($value),
      ])
      ->condition($id_key, $id)
      ->execute();
  }
}

/**
 * Implements hook_update_N().
 *
 * Adding pre text and post text for Borger.dk article.
 */
function os2web_borgerdk_update_8008() {
  // Adding text on the top.
  $storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Pre-text'))
    ->setDescription(t('Text on the top of Borger.dk article'))
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => -1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('view', [
      'type' => 'text_default',
      'label' => 'above',
      'weight' => -1,
    ])
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('pre_text', 'os2web_borgerdk_article', 'os2web_borgerdk_article', $storage_definition);

  // Adding text on the bottom.
  $storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Post-text'))
    ->setDescription(t('Text on the bottom of Borger.dk article'))
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 10,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('view', [
      'type' => 'text_default',
      'label' => 'above',
      'weight' => 10,
    ])
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('post_text', 'os2web_borgerdk_article', 'os2web_borgerdk_article', $storage_definition);
}

/**
 * Implements hook_update_N().
 *
 * Import sources update. Removing failing import source.
 */
function os2web_borgerdk_update_8009() {
  \Drupal::configFactory()->getEditable(SettingsForm::$configName)->set('import_sources', ['da' => 'da'])->save();
}


